// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// C++ from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


#include "OI.h"

// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=INCLUDES
#include "frc/smartdashboard/SmartDashboard.h"
#include "Commands/AimCamera.h"
#include "Commands/AimDown.h"
#include "Commands/AimLeft.h"
#include "Commands/AimRight.h"
#include "Commands/AimUp.h"
#include "Commands/AutonomousCommand.h"
#include "Commands/Burn.h"
#include "Commands/DeployTractorBeam.h"
#include "Commands/DriveStraight.h"
#include "Commands/DriveTurn.h"
#include "Commands/Eject.h"
#include "Commands/Fire.h"
#include "Commands/FuelGrab.h"
#include "Commands/Grab.h"
#include "Commands/Gravitate.h"
#include "Commands/JoyDriveCommand.h"
#include "Commands/Load.h"
#include "Commands/Lock.h"
#include "Commands/RetractTractorBeam.h"
#include "Commands/SpinShooter.h"
#include "Commands/SpinWheel.h"
#include "Commands/SpinWheelField.h"
#include "Commands/ToggleTractorBeam.h"
#include "Commands/TripleSpinControlPanel.h"
#include "Commands/LoadItUp.h"


OI::OI() {

    // OPERATOR Joystick
    operatorJoystick.reset(new frc::Joystick(1));

    //leftTrigger
    //leftTrigButton = (new AnalogJoystickButton(operatorJoystick,2,.5));
    

    //rightTrigger
    //rightTrigButton = (new AnalogJoystickButton(operatorJoystick,3,.5));


    //A Button
    opAButton.reset(new frc::JoystickButton(operatorJoystick.get(), 1));
    opAButton->WhileHeld(new Load(PlasmaTank::kConveyorSpeed));

    //B Button
    opBButton.reset(new frc::JoystickButton(operatorJoystick.get(), 2));
    opBButton->WhileHeld(new Grab(kSpitOut));

    //X Button
    opXButton.reset(new frc::JoystickButton(operatorJoystick.get(), 3));
    opXButton->WhileHeld(new Grab(kGrabIn));

    //Y Button
    opYButton.reset(new frc::JoystickButton(operatorJoystick.get(), 4));


    //Left Bumper - Reach for Hatch
    opLeftBumper.reset(new frc::JoystickButton(operatorJoystick.get(), 5));
    opLeftBumper->WhenPressed(new ToggleTractorBeam());

    //Right Bumper - Hatch Grabber
    opRightBumper.reset(new frc::JoystickButton(operatorJoystick.get(), 6));

    //Back Button
    opBackButton.reset(new frc::JoystickButton(operatorJoystick.get(), 7));
    opBackButton->WhileHeld(new Grab());

    //start Button - 
    opStartButton.reset(new frc::JoystickButton(operatorJoystick.get(), 8));

    // right stick push button
    opRightStickBtn.reset(new frc::JoystickButton(operatorJoystick.get(), 10));


    // Driver joystick
    driverJoystick.reset(new frc::Joystick(0));

    //drAButton.reset(new frc::JoystickButton(driverJoystick.get(), 1));
 
    //drBButton.reset(new frc::JoystickButton(driverJoystick.get(), 2));
  
    drXButton.reset(new frc::JoystickButton(driverJoystick.get(), 3));
    drXButton->WhileHeld(new Fire());

    //drYButton.reset(new frc::JoystickButton(driverJoystick.get(), 4));

    //drStartButton.reset(new frc::JoystickButton(driverJoystick.get(), 8));
 
    //drBackButton.reset(new frc::JoystickButton(driverJoystick.get(), 7));

    //drRightBumper.reset(new frc::JoystickButton(driverJoystick.get(), 6));
    //drLeftBumper.reset(new frc::JoystickButton(driverJoystick.get(), 5));
    //drRightStickBtn.reset(new frc::JoystickButton(driverJoystick.get(), 10));


    // SmartDashboard Buttons
    /*
    frc::SmartDashboard::PutData("Gravitate: stop", new Gravitate(0));
    frc::SmartDashboard::PutData("Gravitate: up", new Gravitate(0.5));
    frc::SmartDashboard::PutData("Gravitate: down", new Gravitate(-0.5));
    frc::SmartDashboard::PutData("ToggleTractorBeam", new ToggleTractorBeam());
    frc::SmartDashboard::PutData("RetractTractorBeam", new RetractTractorBeam());
    frc::SmartDashboard::PutData("DeployTractorBeam", new DeployTractorBeam());
    frc::SmartDashboard::PutData("FuelGrab: stop", new FuelGrab(0));
    frc::SmartDashboard::PutData("FuelGrab: grab", new FuelGrab(-0.5));
    frc::SmartDashboard::PutData("FuelGrab: spit", new FuelGrab(0.5));
    frc::SmartDashboard::PutData("SpinWheelField", new SpinWheelField());
    frc::SmartDashboard::PutData("SpinWheel: stop", new SpinWheel(0));
    frc::SmartDashboard::PutData("SpinWheel: left", new SpinWheel(-0.5));
    frc::SmartDashboard::PutData("SpinWheel: right", new SpinWheel(0.5));
    frc::SmartDashboard::PutData("Load: stop", new Load(0));
    frc::SmartDashboard::PutData("Load: eject", new Load(-0.5));
    frc::SmartDashboard::PutData("Load: fire", new Load(0.9));
    frc::SmartDashboard::PutData("Lock: stop", new Lock(0));
    frc::SmartDashboard::PutData("Lock: run", new Lock(0.4));
    frc::SmartDashboard::PutData("Eject", new Eject());
    frc::SmartDashboard::PutData("SpinShooter", new SpinShooter());
    frc::SmartDashboard::PutData("AimCamera", new AimCamera());
    frc::SmartDashboard::PutData("AimDown", new AimDown());
    frc::SmartDashboard::PutData("AimUp", new AimUp());
    frc::SmartDashboard::PutData("AimRight", new AimRight());
    frc::SmartDashboard::PutData("AimLeft", new AimLeft());
    frc::SmartDashboard::PutData("Fire", new Fire());
    frc::SmartDashboard::PutData("DriveTurn: stop", new DriveTurn(0));
    frc::SmartDashboard::PutData("DriveTurn: left", new DriveTurn(-0.5));
    frc::SmartDashboard::PutData("DriveTurn: right", new DriveTurn(0.5));
    frc::SmartDashboard::PutData("DriveStraight: stop", new DriveStraight(0));
    frc::SmartDashboard::PutData("DriveStraight: rev", new DriveStraight(-0.5));
    frc::SmartDashboard::PutData("DriveStraight: forward", new DriveStraight(0.5));
*/
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS

        frc::SmartDashboard::PutData("Burn CANSparkMAX", new Burn());
}

// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=FUNCTIONS

std::shared_ptr<frc::Joystick> OI::getDriverJoystick() {
   return driverJoystick;
}

std::shared_ptr<frc::Joystick> OI::getOperatorJoystick() {
   return operatorJoystick;
}


    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=FUNCTIONS
