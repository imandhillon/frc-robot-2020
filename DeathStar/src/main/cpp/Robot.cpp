// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// C++ from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


#include "Robot.h"

#include <hal/FRCUsageReporting.h>

#include <frc/Commands/Scheduler.h>
#include <frc/SmartDashboard/SmartDashboard.h>

	// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=INITIALIZATION
std::shared_ptr<Hyperdrive> Robot::hyperdrive;
std::shared_ptr<LifeSupport> Robot::lifeSupport;
std::shared_ptr<IonCanon> Robot::ionCanon;
std::shared_ptr<PlasmaTank> Robot::plasmaTank;
std::shared_ptr<TractorBeam> Robot::tractorBeam;
std::shared_ptr<WarpDriveInverter> Robot::warpDriveInverter;
std::shared_ptr<TheForce> Robot::theForce;
std::unique_ptr<OI> Robot::oi;

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=INITIALIZATION

void Robot::RobotInit() {
	// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
	hyperdrive.reset(new Hyperdrive());
	SPAMutil::Log("Robot", "Constructed Hyperdrive", SPAMutil::LOG_DBG);
	lifeSupport.reset(new LifeSupport());
	SPAMutil::Log("Robot", "Constructed LifeSupport", SPAMutil::LOG_DBG);
	ionCanon.reset(new IonCanon());
	SPAMutil::Log("Robot", "Constructed IonCannon", SPAMutil::LOG_DBG);
	plasmaTank.reset(new PlasmaTank());
	SPAMutil::Log("Robot", "Constructed PlasmaTank", SPAMutil::LOG_DBG);
	tractorBeam.reset(new TractorBeam());
	SPAMutil::Log("Robot", "Constructed TractorBeam", SPAMutil::LOG_DBG);
	warpDriveInverter.reset(new WarpDriveInverter());
	SPAMutil::Log("Robot", "Constructed WarpDriveInveter", SPAMutil::LOG_DBG);
	theForce.reset(new TheForce());
	SPAMutil::Log("Robot", "Constructed TheForce", SPAMutil::LOG_DBG);


	

	oi.reset(new OI());
	SPAMutil::Log("Robot", "Constructed OI", SPAMutil::LOG_DBG);

	HAL_Report(HALUsageReporting::kResourceType_Framework,
		HALUsageReporting::kFramework_RobotBuilder);

	// Add commands to Autonomous Sendable Chooser
	// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=AUTONOMOUS

	chooser.AddOption("AutonomousCommand", new AutonomousCommand());


    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=AUTONOMOUS
	frc::SmartDashboard::PutData("Auto Modes", &chooser);
	//warpDriveInverter -> ColorMatcherInit();
}

/**
 * This function is called when the disabled button is hit.
 * You can use it to reset subsystems before shutting down.
 */
void Robot::DisabledInit(){
}

void Robot::DisabledPeriodic() {
	frc::Scheduler::GetInstance()->Run();
}

void Robot::AutonomousInit() {
	autonomousCommand = chooser.GetSelected();
	if (autonomousCommand != nullptr)
		autonomousCommand->Start();
}

void Robot::AutonomousPeriodic() {
	frc::Scheduler::GetInstance()->Run();
}

void Robot::TeleopInit() {
	// This makes sure that the autonomous stops running when
	// teleop starts running. If you want the autonomous to
	// continue until interrupted by another command, remove
	// these lines or comment it out.
	if (autonomousCommand != nullptr)
		autonomousCommand->Cancel();
}

void Robot::TeleopPeriodic() {
	frc::Scheduler::GetInstance()->Run();
}

#ifndef RUNNING_FRC_TESTS
int main(int argc, char** argv) {
    return frc::StartRobot<Robot>();
}
#endif
