// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// C++ from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


#include "Subsystems/IonCanon.h"

#include "Commands/AimCamera.h"
#include "Commands/AimJoystick.h"

#include "frc/smartdashboard/SmartDashboard.h"

constexpr double kShooterMaxCurrent = 40.0;
constexpr double kTurretMaxCurrent = 20.0;


IonCanon::IonCanon() : frc::Subsystem("IonCanon") {

shooterMotor1.reset(new rev::CANSparkMax(12, rev::CANSparkMax::MotorType::kBrushless));
shooterMotor2.reset(new rev::CANSparkMax(13, rev::CANSparkMax::MotorType::kBrushless));
turretMotor.reset(new rev::CANSparkMax(14, rev::CANSparkMax::MotorType::kBrushless));
domeServo.reset(new frc::Servo(5));
AddChild("DomeServo", domeServo);

turretReferenceSwitch.reset(new frc::DigitalInput(4));
AddChild("TurretReferenceSwitch", turretReferenceSwitch);

// Set up encoders
/*turretQuadEncoder.reset(new frc::Encoder(6, 7, false, frc::Encoder::k4X));
AddChild("TurretQuadEncoder", turretQuadEncoder);
turretQuadEncoder->SetDistancePerPulse(1.0);
turretQuadEncoder->SetPIDSourceType(frc::PIDSourceType::kRate);
*/
m_shooter1Encoder.reset(new rev::CANEncoder(*m_shooter1Encoder));
turretQuadEncoder.reset(new rev::CANEncoder(*turretQuadEncoder));

loadedSensor.reset(new frc::DigitalInput(12));
AddChild("LoadedSensor", loadedSensor);

    // limit current
    shooterMotor1->SetSmartCurrentLimit(kShooterMaxCurrent);
    shooterMotor2->SetSmartCurrentLimit(kShooterMaxCurrent);
    turretMotor->SetSmartCurrentLimit(kTurretMaxCurrent);
    
    // Set the shooter motor follower
    shooterMotor2->Follow(*shooterMotor1);
 
    uint32_t lcpr = m_shooter1Encoder->GetCountsPerRevolution();
    m_shooter1Encoder->SetPositionConversionFactor(2.0 * wpi::math::pi * (double)kWheelRadius * kGearRatio / lcpr);

    uint32_t tcpr = turretQuadEncoder->GetCountsPerRevolution();
    turretQuadEncoder->SetPositionConversionFactor(2.0 * wpi::math::pi * (double)kTurretRadius * kTGearRatio / tcpr);

} 


void IonCanon::InitDefaultCommand() {

    //SetDefaultCommand(new AimCamera());
    SetDefaultCommand(new AimJoystick());
}

void IonCanon::Periodic() {
    // Put code here to be run every loop
    frc::SmartDashboard::PutNumber("shooterSpd",m_shooter1Encoder->GetVelocity() );
    frc::SmartDashboard::PutNumber("turretPos",turretQuadEncoder->GetPosition() );
}

// Shooter 
void IonCanon::SpinShooter(double speed)
{
    shooterMotor1->Set(speed);
}

void IonCanon::StopShooter()
{
    shooterMotor1->StopMotor();
}

// Turn Turret
void IonCanon::AimCam()
{

}
void IonCanon::AimLeft()
{
    turretMotor->Set(-kTurretSpeed);
}
void IonCanon::AimRight()
{
    turretMotor->Set(kTurretSpeed);
}
void IonCanon::AimUp()
{
    domeServo->SetSpeed(kDomeSpeed);
}
void IonCanon::AimDown()
{
    domeServo->SetSpeed(-kDomeSpeed);
}

void IonCanon::SetServo(float value){
    domeServo->Set(value / 2 + 0.5);
}

void IonCanon::AimStop()
{
    turretMotor->StopMotor();
    domeServo->StopMotor();
}
void IonCanon::StopTurret()
{
        turretMotor->StopMotor();
}

void IonCanon::StopDome()
{
        domeServo->StopMotor();
}

// Burn CANSparkMAX settings on motors
void IonCanon::Burn()
{
    shooterMotor1->BurnFlash();
    shooterMotor2->BurnFlash();
    turretMotor->BurnFlash();
}
