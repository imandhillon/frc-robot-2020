// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// C++ from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


#include "Subsystems/LifeSupport.h"
// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=INCLUDES

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=INCLUDES

// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS

LifeSupport::LifeSupport() : frc::Subsystem("LifeSupport") {
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
airSqueeze.reset(new frc::Compressor(0));
AddChild("AirSqueeze", airSqueeze);

pDP.reset(new frc::PowerDistributionPanel(0));
AddChild("PDP", pDP);

lightsRelay.reset(new frc::Relay(0));
AddChild("LightsRelay", lightsRelay);

gyro.reset(new frc::ADXRS450_Gyro);
AddChild("gyro", gyro);

geez.reset(new frc::BuiltInAccelerometer);
AddChild("accelerometer", geez);
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
}

void LifeSupport::InitDefaultCommand() {
    // Set the default command for a subsystem here.
    // SetDefaultCommand(new MySpecialCommand());
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND
    m_targetsAvailable = 0.;
    m_targetX          = 0.;
    m_targetY          = 0.;
    m_targetArea       = 0.;	

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND
}

void LifeSupport::Periodic() {
    // Put code here to be run every loop

    frc::SmartDashboard::PutNumber("GyroYaw",gyroAngle()) ;
    frc::SmartDashboard::PutNumber("GyroYawRate",gyroRate() ) ;    
    frc::SmartDashboard::PutNumber("gravity",Zgeez() ) ;
}

// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CMDPIDGETTERS

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CMDPIDGETTERS


// Put methods for controlling this subsystem
// here. Call these from Commands.

void LifeSupport::Calibrate() {
    gyro->Calibrate();
}

double LifeSupport::gyroAngle() {
    return gyro->GetAngle();
}

double LifeSupport::gyroRate() {
    return gyro->GetRate();
}

void LifeSupport::gyroReset() {
    gyro->Reset();
}

double LifeSupport::Xgeez(){
    return geez->GetX();
}

double LifeSupport::Ygeez(){
    return geez->GetY();
}

double LifeSupport::Zgeez(){
    return geez->GetZ();
}

void LifeSupport::LimeRoxTrack()
{
std::shared_ptr<NetworkTable> table = nt::NetworkTableInstance::GetDefault().GetTable("limelight");
double tx = 0.;
double ty = 0.;
double ta = 0.;
double tv = 0.;
  //if(table != NULL ) {
  // x offset deg
     tx = table->GetNumber("tx",0.0);
  // y offset deg
     ty = table->GetNumber("ty",0.0);
  // target size
     ta = table->GetNumber("ta",0.0);
  // target(s) available

     tv = table->GetNumber("tv",0.0);
  //}

  m_targetsAvailable = tv;
  m_targetX          = tx;
  m_targetY          = ty;
  m_targetArea       = ta;

}
bool LifeSupport::getLimeRoxInView(){
	bool InView;
	if(m_targetsAvailable < 1.0) {
		InView =  false;
	} else{
		InView =  true;
	}
	return InView;
}
	
double LifeSupport::getLimeRoxX(){

	return m_targetX;
}

double LifeSupport::getLimeRoxY(){

	return m_targetY;
}

double LifeSupport::getLimeRoxA(){
    return m_targetArea;
}

double LifeSupport::getLimeRoxS(){
    return m_targetSkew;
}

void LifeSupport::LimeRoxLEDOn(){

  std::shared_ptr<NetworkTable> table = nt::NetworkTableInstance::GetDefault().GetTable("limelight");

  table->PutNumber("ledMode",0);
  //table->PutNumber("ledMode",3);

}

void LifeSupport::LimeRoxLEDOff(){

  std::shared_ptr<NetworkTable> table = nt::NetworkTableInstance::GetDefault().GetTable("limelight");

  table->PutNumber("ledMode",1);

}

void LifeSupport::LimeRoxLEDBlnk(){

  std::shared_ptr<NetworkTable> table = nt::NetworkTableInstance::GetDefault().GetTable("limelight");

  table->PutNumber("ledMode",2);
}

void LifeSupport::setLimeRoxPipe0(){
  std::shared_ptr<NetworkTable> table = nt::NetworkTableInstance::GetDefault().GetTable("limelight");
    table->PutNumber("pipeline",0);
}


