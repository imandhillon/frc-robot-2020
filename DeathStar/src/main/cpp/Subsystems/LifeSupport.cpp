// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// C++ from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.

//#define ADDRESSABLE_LEDS

#include "Subsystems/LifeSupport.h"
#include "ntcore.h"
#include "frc/smartdashboard/SmartDashboard.h"
// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=INCLUDES

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=INCLUDES

// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS

LifeSupport::LifeSupport() : frc::Subsystem("LifeSupport") {
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
airSqueeze.reset(new frc::Compressor(0));
AddChild("AirSqueeze", airSqueeze);

pDP.reset(new frc::PowerDistributionPanel(0));
AddChild("PDP", pDP);

lightsRelay.reset(new frc::Relay(0));
AddChild("LightsRelay", lightsRelay);


    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    gyro.reset(new frc::ADXRS450_Gyro());

#ifdef ADDRESSABLE_LEDS
 // addressable LED boilerplate init
      // Default to a length of 60, start empty output
    // Length is expensive to set, so only set it once, then just update data
    m_led.SetLength(kLength);
    m_led.SetData(m_ledBuffer);
    m_led.Start();   

#endif

}

void LifeSupport::InitDefaultCommand() {
    // Set the default command for a subsystem here.
    // SetDefaultCommand(new MySpecialCommand());
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND


    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND
}

void LifeSupport::Periodic() {
    // Put code here to be run every loop

    frc::SmartDashboard::PutNumber("GyroYaw",gyroAngle()) ;
    frc::SmartDashboard::PutNumber("GyroYawRate",gyroRate() ) ;    
    //frc::SmartDashboard::PutNumber("gravity",Zgeez() ) ;
}

// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CMDPIDGETTERS

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CMDPIDGETTERS


// Put methods for controlling this subsystem
// here. Call these from Commands.

void LifeSupport::Calibrate() {
    gyro->Calibrate();
}

double LifeSupport::gyroAngle() {
    return gyro->GetAngle();
}

double LifeSupport::gyroRate() {
    return gyro->GetRate();
}

void LifeSupport::gyroReset() {
    gyro->Reset();
}

double LifeSupport::Xgeez(){
    return 0; //geez->GetX();
}

double LifeSupport::Ygeez(){
    return 0; //geez->GetY();
}

double LifeSupport::Zgeez(){
    return 0; //geez->GetZ();
}

#ifdef ADDRESSABLE_LEDS 
// addressable leds
void LifeSupport::SetRedLeader(){
  for (int i = 0; i < kLength; i++) {
    m_ledBuffer[i].SetHSV(0, 100, 100);
  }

  m_led.SetData(m_ledBuffer);
}

void LifeSupport::SetGoldLeader(){
  for (int i = 0; i < kLength; i++) {
    m_ledBuffer[i].SetHSV(30, 100, 100);
    m_led.SetData(m_ledBuffer);
  }
}

void LifeSupport::SetBlueLeader(){
  for (int i = 0; i < kLength; i++) {
    m_ledBuffer[i].SetHSV(120, 100, 100);
    m_led.SetData(m_ledBuffer);
  }
}

void LifeSupport::SetSkittles(){
 // For every pixel
    for (int i = 0; i < kLength; i++) {
      // Calculate the hue - hue is easier for rainbows because the color
      // shape is a circle so only one value needs to precess
      const auto pixelHue = (firstPixelHue + (i * 180 / kLength)) % 180;
      // Set the value
      m_ledBuffer[i].SetHSV(pixelHue, 255, 128);
    }
    // Increase by to make the rainbow "move"
    firstPixelHue += 3;
    // Check bounds
    firstPixelHue %= 180;
}
#else
void LifeSupport::SetRedLeader(){}
void LifeSupport::SetGoldLeader(){}
void LifeSupport::SetBlueLeader(){}
void LifeSupport::SetSkittles(){}
#endif