// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// C++ from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


#include "Subsystems/LimeAide.h"
#include "ntcore.h"
#include "frc/smartdashboard/SmartDashboard.h"
#include "networktables/NetworkTable.h"
#include "networktables/NetworkTableInstance.h"

LimeAide::LimeAide() : frc::Subsystem("LimeAide") { 
  
}

void LimeAide::InitDefaultCommand() {}
void LimeAide::Periodic() {}

void LimeAide::LimeRoxTrack()
{
std::shared_ptr<NetworkTable> table = nt::NetworkTableInstance::GetDefault().GetTable("limelight");
double tx = 0.;
double ty = 0.;
double ta = 0.;
double tv = 0.;
  //if(table != NULL ) {
  // x offset deg
     tx = table->GetNumber("tx",0.0);
  // y offset deg
     ty = table->GetNumber("ty",0.0);
  // target size
     ta = table->GetNumber("ta",0.0);
  // target(s) available

     tv = table->GetNumber("tv",0.0);
  //}

  m_targetsAvailable = tv;
  m_targetX          = tx;
  m_targetY          = ty;
  m_targetArea       = ta;

}
bool LimeAide::getLimeRoxInView(){
	bool InView;
	if(m_targetsAvailable < 1.0) {
		InView =  false;
	} else{
		InView =  true;
	}
	return InView;
}
	
double LimeAide::getLimeRoxX(){

	return m_targetX;
}

double LimeAide::getLimeRoxY(){

	return m_targetY;
}

double LimeAide::getLimeRoxA(){
    return m_targetArea;
}

double LimeAide::getLimeRoxS(){
    return m_targetSkew;
}

void LimeAide::LimeRoxLEDOn(){

  std::shared_ptr<NetworkTable> table = nt::NetworkTableInstance::GetDefault().GetTable("limelight");

  table->PutNumber("ledMode",0);
  //table->PutNumber("ledMode",3);

}

void LimeAide::LimeRoxLEDOff(){

  std::shared_ptr<NetworkTable> table = nt::NetworkTableInstance::GetDefault().GetTable("limelight");

  table->PutNumber("ledMode",1);

}

void LimeAide::LimeRoxLEDBlnk(){

  std::shared_ptr<NetworkTable> table = nt::NetworkTableInstance::GetDefault().GetTable("limelight");

  table->PutNumber("ledMode",2);
}

void LimeAide::setLimeRoxPipe0(){
  std::shared_ptr<NetworkTable> table = nt::NetworkTableInstance::GetDefault().GetTable("limelight");
    table->PutNumber("pipeline",0);
}




    // SmartDashboard Buttons
    //frc::SmartDashboard::PutData("GrabHatch", new GrabHatch());






