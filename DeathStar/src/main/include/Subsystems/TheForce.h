// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// C++ from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.

#pragma once

#include "frc/commands/Subsystem.h"

// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=INCLUDES
#include "ctre/Phoenix.h"
#include "frc/DigitalInput.h"
#include "frc/Encoder.h"
#include "frc/Joystick.h"

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=INCLUDES
// set up for closed loop control
#include <frc/controller/PIDController.h>
#include <units/units.h>
#include <wpi/math>
/**
 *
 *
 * @author ExampleAuthor
 */
class TheForce: public frc::Subsystem {
private:
	// It's desirable that everything possible is private except
	// for methods that implement subsystem capabilities
std::shared_ptr<ctre::phoenix::motorcontrol::can::WPI_VictorSPX> liftMotor;
std::shared_ptr<ctre::phoenix::motorcontrol::can::WPI_VictorSPX> liftMotor1;
std::shared_ptr<frc::Encoder> liftEncoder;
std::shared_ptr<frc::DigitalInput> liftReferenceSwitch;
// closed loop control
frc2::PIDController m_liftPIDController{0.002, 0.0, 0.0};

    double m_BangBang_Speed;
    double m_LiftSetPoint;

    double m_aPosition;
    double m_kminInput;
    double m_kmaxInput;
    double m_kmaxOutput;
    bool theForceEnabled = true;

public:
    static constexpr double BANGBANG_LO_SIDE = -100.;
    static constexpr double BANGBANG_HI_SIDE =  100.;
    static constexpr double WOOKIE_HEIGHT    =  1250; //1450.;
    static constexpr double EWOK_HEIGHT      =  50.;
    static constexpr double SOLO_HEIGHT      =  850.;
	
    TheForce();
	void InitDefaultCommand() override;
	void Periodic() override;

    // open loop
    void UseTheForce(std::shared_ptr<frc::Joystick> j);
    // closedvloop
    void YodaLift();
    void SetLiftWookie(); // max
    void SetLiftEwok();   // home
    void SetLiftSolo();   // hang
    void SetLiftHome();   // hang
    void SetLiftBangBang(double height, double speed); // anything
    // pid
    void ChewieLift();
    void GetPosition();
    
};

