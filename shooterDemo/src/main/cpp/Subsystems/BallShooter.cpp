// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// C++ from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


#include "Subsystems/BallShooter.h"
// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=INCLUDES
#include "Commands/ShootBalls.h"
// END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=INCLUDES
#include "OI.h"

// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS
// END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS

BallShooter::BallShooter() : frc::Subsystem("BallShooter") {
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
//ballShooter1.reset(new frc::NidecBrushless(1, 1));
ballShooter1.reset(new rev::CANSparkMax(5,  rev::CANSparkMaxLowLevel::MotorType::kBrushless));

//AddChild("ballShooter1", ballShooter1);

//ballshooter2.reset(new frc::NidecBrushless(2, 2));
 ballShooter2.reset(new rev::CANSparkMax(7,  rev::CANSparkMaxLowLevel::MotorType::kBrushless));
//AddChild("ballshooter2", ballshooter2);

shooterDrive.reset(new frc::RobotDrive(ballShooter1, ballShooter2));

shooterDrive->SetSafetyEnabled(true);
shooterDrive->SetExpiration(0.1);
shooterDrive->SetSensitivity(0.5);
shooterDrive->SetMaxOutput(1.0);
shooterDrive->SetInvertedMotor(frc::RobotDrive::kRearLeftMotor, true);
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS

motor1_775.reset(new can::WPI_VictorSPX(6));
motor2_775.reset(new can::WPI_VictorSPX(8));
drive775.reset(new frc::RobotDrive(motor1_775, motor2_775));

drive775->SetSafetyEnabled(true);
drive775->SetExpiration(0.1);
drive775->SetSensitivity(0.5);
drive775->SetMaxOutput(1.0);
drive775->SetInvertedMotor(frc::RobotDrive::kRearLeftMotor, true);

}

void BallShooter::InitDefaultCommand() {
    // Set the default command for a subsystem here.
    // SetDefaultCommand(new MySpecialCommand());
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND

        SetDefaultCommand(new ShootBalls());
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND
}

void BallShooter::Periodic() {
    // Put code here to be run every loop

}

// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CMDPIDGETTERS
// END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CMDPIDGETTERS
void BallShooter::DriveShooter(std::shared_ptr<frc::Joystick> j)
{
    float y = -1. * j->GetY();
    float yy  = j->GetRawAxis(4);
    shooterDrive->TankDrive(y,y,false);
    drive775->TankDrive(yy,yy,false);
}

// Put methods for controlling this subsystem
// here. Call these from Commands.

